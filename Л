<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –Ω–∞ –∫–∞—Ä—Ç—ñ</title>
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            overflow: hidden;
            background: var(--tg-theme-bg-color, #ffffff);
        }
        
        #map {
            width: 100vw;
            height: 100vh;
            position: absolute;
            top: 0;
            left: 0;
        }
        
        .info-panel {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--tg-theme-bg-color, #ffffff);
            padding: 12px 20px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
            max-width: 90%;
            text-align: center;
            color: var(--tg-theme-text-color, #000000);
        }
        
        .info-panel h3 {
            font-size: 16px;
            margin-bottom: 5px;
            font-weight: 600;
        }
        
        .info-panel p {
            font-size: 13px;
            color: var(--tg-theme-hint-color, #999999);
        }
        
        .coordinates {
            position: absolute;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--tg-theme-bg-color, #ffffff);
            padding: 10px 16px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            z-index: 1000;
            font-size: 12px;
            color: var(--tg-theme-text-color, #000000);
            display: none;
        }
        
        .marker-icon {
            background: transparent;
            border: none;
        }
        
        .pulse {
            width: 30px;
            height: 30px;
            border: 5px solid var(--tg-theme-button-color, #3390ec);
            border-radius: 50%;
            background: var(--tg-theme-button-color, #3390ec);
            opacity: 0.8;
            position: relative;
        }
        
        .pulse::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 40px;
            height: 40px;
            border: 2px solid var(--tg-theme-button-color, #3390ec);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            animation: pulse 1.5s ease-out infinite;
            opacity: 0;
        }
        
        @keyframes pulse {
            0% {
                transform: translate(-50%, -50%) scale(0.5);
                opacity: 1;
            }
            100% {
                transform: translate(-50%, -50%) scale(1.5);
                opacity: 0;
            }
        }
        
        .locate-button {
            position: absolute;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            background: var(--tg-theme-button-color, #3390ec);
            border: none;
            border-radius: 50%;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            cursor: pointer;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--tg-theme-button-text-color, #ffffff);
            font-size: 24px;
        }
        
        .locate-button:active {
            transform: scale(0.95);
        }
        
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 2000;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 20px 30px;
            border-radius: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    
    <div class="info-panel">
        <h3>üó∫ –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –Ω–∞ –∫–∞—Ä—Ç—ñ</h3>
        <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–æ—á–∫—É</p>
    </div>
    
    <div class="coordinates" id="coordinates">
        <strong>üìç –û–±—Ä–∞–Ω–æ:</strong> <span id="coords-text"></span>
    </div>
    
    <button class="locate-button" id="locate-btn" title="–ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è">
        üìç
    </button>
    
    <div class="loading" id="loading">
        <p>‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
    </div>
    
    <!-- Telegram WebApp SDK -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    
    <script>
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp
        const tg = window.Telegram.WebApp;
        console.log('üöÄ Telegram WebApp initialized:', tg);
        console.log('üì± Version:', tg.version);
        console.log('üë§ User:', tg.initDataUnsafe?.user);
        
        tg.expand(); // –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω
        tg.MainButton.setText('‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –º—ñ—Å—Ü–µ');
        tg.MainButton.hide(); // –°–ø–æ—á–∞—Ç–∫—É —Å—Ö–æ–≤–∞—Ç–∏
        
        console.log('üîò MainButton configured');
        
        // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ç–µ–º—É Telegram
        document.body.style.backgroundColor = tg.themeParams.bg_color || '#ffffff';
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏ (—Ü–µ–Ω—Ç—Ä –£–∫—Ä–∞—ó–Ω–∏)
        const map = L.map('map', {
            zoomControl: false, // –ü—Ä–∏–±—Ä–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π zoom control
        }).setView([48.3794, 31.1656], 6); // –£–∫—Ä–∞—ó–Ω–∞
        
        // üåô –¢–ï–ú–ù–ê –ö–ê–†–¢–ê –∑ –≥–∞—Ä–Ω–æ—é –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—é (—è–∫ Uber/Apple Maps Dark)
        // Voyager Dark - —Ç–µ–º–Ω–∞ –∞–ª–µ –¥–æ—Ä–æ–≥–∏ —Ç–∞ –≤–æ–¥–∞ –¥–æ–±—Ä–µ –≤–∏–¥–Ω–æ!
        L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}{r}.png', {
            attribution: '¬© CARTO',
            maxZoom: 19,
            subdomains: 'abcd'
        }).addTo(map);
        
        // –î–æ–¥–∞—Ç–∏ —à–∞—Ä –∑ –ø—ñ–¥–ø–∏—Å–∞–º–∏ –∑–≤–µ—Ä—Ö—É –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_only_labels/{z}/{x}/{y}{r}.png', {
            attribution: '',
            maxZoom: 19,
            subdomains: 'abcd'
        }).addTo(map);
        
        console.log('üåô Dark Voyager map theme loaded (high contrast)');
        
        // –î–æ–¥–∞—Ç–∏ zoom control –≤ —ñ–Ω—à–µ –º—ñ—Å—Ü–µ
        L.control.zoom({
            position: 'bottomleft'
        }).addTo(map);
        
        // –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        let selectedMarker = null;
        let selectedCoords = null;
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
        const createMarkerIcon = () => {
            return L.divIcon({
                className: 'marker-icon',
                html: '<div class="pulse"></div>',
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            });
        };
        
        // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –ø–æ –∫–∞—Ä—Ç—ñ
        map.on('click', (e) => {
            const { lat, lng } = e.latlng;
            console.log('üó∫ Map clicked:', lat, lng);
            
            // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º–∞—Ä–∫–µ—Ä
            if (selectedMarker) {
                map.removeLayer(selectedMarker);
            }
            
            // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Ä–∫–µ—Ä
            selectedMarker = L.marker([lat, lng], {
                icon: createMarkerIcon()
            }).addTo(map);
            
            // –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
            selectedCoords = { lat, lng };
            console.log('üíæ Coordinates saved:', selectedCoords);
            
            // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
            document.getElementById('coords-text').textContent = 
                `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
            document.getElementById('coordinates').style.display = 'block';
            
            // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            tg.MainButton.show();
            console.log('‚úÖ MainButton shown');
            
            // –õ–µ–≥–∫–∞ –≤—ñ–±—Ä–∞—Ü—ñ—è (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if (tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        });
        
        // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"
        tg.MainButton.onClick(() => {
            console.log('üîò MainButton clicked!');
            console.log('üìç Selected coords:', selectedCoords);
            
            if (selectedCoords) {
                const dataToSend = {
                    type: 'location',
                    latitude: selectedCoords.lat,
                    longitude: selectedCoords.lng
                };
                
                console.log('üì§ Sending data to bot:', dataToSend);
                
                try {
                    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ –≤ –±–æ—Ç–∞
                    const jsonData = JSON.stringify(dataToSend);
                    console.log('üì¶ JSON data:', jsonData);
                    
                    tg.sendData(jsonData);
                    console.log('‚úÖ Data sent successfully!');
                    
                    // –í—ñ–±—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—Ö—É
                    if (tg.HapticFeedback) {
                        tg.HapticFeedback.notificationOccurred('success');
                    }
                    
                    // –í–ê–ñ–õ–ò–í–û! –ó–∞–∫—Ä–∏—Ç–∏ WebApp –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                    // –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å Telegram –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥–∞–Ω—ñ –≤ –±–æ—Ç–∞
                    console.log('üö™ Closing WebApp...');
                    tg.close();
                    
                } catch (error) {
                    console.error('‚ùå Error sending data:', error);
                    alert('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö: ' + error.message);
                }
            } else {
                console.warn('‚ö†Ô∏è No coordinates selected!');
                alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ');
            }
        });
        
        // –ö–Ω–æ–ø–∫–∞ "–ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è"
        document.getElementById('locate-btn').addEventListener('click', () => {
            const loading = document.getElementById('loading');
            loading.style.display = 'block';
            
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const { latitude, longitude } = position.coords;
                        
                        // –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–∞—Ä—Ç—É –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó
                        map.setView([latitude, longitude], 15);
                        
                        // –î–æ–¥–∞—Ç–∏ –º–∞—Ä–∫–µ—Ä
                        if (selectedMarker) {
                            map.removeLayer(selectedMarker);
                        }
                        
                        selectedMarker = L.marker([latitude, longitude], {
                            icon: createMarkerIcon()
                        }).addTo(map);
                        
                        selectedCoords = { lat: latitude, lng: longitude };
                        
                        // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
                        document.getElementById('coords-text').textContent = 
                            `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
                        document.getElementById('coordinates').style.display = 'block';
                        
                        // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É
                        tg.MainButton.show();
                        
                        loading.style.display = 'none';
                        
                        if (tg.HapticFeedback) {
                            tg.HapticFeedback.notificationOccurred('success');
                        }
                    },
                    (error) => {
                        loading.style.display = 'none';
                        alert('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –Ω–∞ –∫–∞—Ä—Ç—ñ –≤—Ä—É—á–Ω—É.');
                        
                        if (tg.HapticFeedback) {
                            tg.HapticFeedback.notificationOccurred('error');
                        }
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 0
                    }
                );
            } else {
                loading.style.display = 'none';
                alert('‚ùå –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é');
            }
        });
        
        // –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è WebApp
        tg.onEvent('backButtonClicked', () => {
            tg.close();
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ Telegram
        tg.BackButton.show();
    </script>
</body>
</html>
